<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
       http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd">

	<import resource="classpath*:orcid-oauth2-common-config.xml"/>
	
	<sec:http-firewall ref="httpFirewall"/>

	<sec:http pattern="/resources/**" security="none"/>
	
	<!-- enable swagger -->
	<sec:http pattern="/v2**/" security="none"/>
	<sec:http pattern="/v2**/o2c.html" security="none"/>
	<sec:http pattern="/v3**/" security="none"/>
	<sec:http pattern="/v3**/o2c.html" security="none"/>
	
	<!--  Status check -->
	<sec:http pattern="/v*/apiStatus" security="none"/>

    <!-- Authenticate the client before reaching the token endpoint -->
    <sec:http pattern="/oauth/token" use-expressions="false" create-session="stateless" authentication-manager-ref="clientAuthenticationManager">
        <sec:csrf disabled="true"/>
        <sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <sec:anonymous enabled="false" />
        <sec:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
        <!-- include this only if you need to authenticate clients via request parameters -->
        <sec:custom-filter ref="customFilters" before="BASIC_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>

    <!-- Authentication for member V2 API, has different exception renderer -->
    <sec:http pattern="/v2**" use-expressions="true" create-session="stateless">
    	<sec:csrf disabled="true"/>
        <sec:anonymous enabled="false" />
        <sec:x509 subject-principal-regex="CN=(.*?)," user-service-ref="x509UserService"/>
        <sec:intercept-url pattern="**" access="#oauth2.clientHasRole('ROLE_CLIENT') or hasRole('ROLE_SYSTEM') or hasRole('ROLE_USER')"/>
        <sec:custom-filter ref="orcidResourceServerFilter" before="PRE_AUTH_FILTER" />
        <sec:access-denied-handler ref="orcidOauthAuthenticationEntryPoint" />
        <sec:expression-handler ref="oauthWebExpressionHandler" />
    </sec:http>

    <!-- Authentication for notifications API, has different exception renderer -->
    <sec:http pattern="/**/notifications/**" use-expressions="true" create-session="stateless">
    	<sec:csrf disabled="true"/>
        <sec:anonymous enabled="false" />
        <sec:x509 subject-principal-regex="CN=(.*?)," user-service-ref="x509UserService"/>
        <sec:intercept-url pattern="**" access="#oauth2.clientHasRole('ROLE_CLIENT') or hasRole('ROLE_SYSTEM') or hasRole('ROLE_USER')"/>
        <sec:custom-filter ref="orcidResourceServerFilter" before="PRE_AUTH_FILTER" />
        <sec:access-denied-handler ref="orcidOauthAuthenticationEntryPoint" />
        <sec:expression-handler ref="oauthWebExpressionHandler" />
    </sec:http>

    <!-- All other authentication will come through this. If a certificate is not found, it will attempt OAuth2 auth -->
    <sec:http use-expressions="true" create-session="stateless">
    	<sec:csrf disabled="true"/>
        <sec:anonymous enabled="false" />
        <sec:x509 subject-principal-regex="CN=(.*?)," user-service-ref="x509UserService"/>
        <sec:intercept-url pattern="/**" access="#oauth2.clientHasRole('ROLE_CLIENT') or hasRole('ROLE_SYSTEM') or hasRole('ROLE_USER')"/>
        <sec:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
        <sec:expression-handler ref="oauthWebExpressionHandler" />
    </sec:http>
    
    <!-- A simple authentication manager that will attempt to authenticate the client using the X.509 cert -->
    <sec:authentication-manager id="x509AuthenticationManager">
        <sec:authentication-provider ref="x509AuthenticationProvider"/>
    </sec:authentication-manager>
    
    <bean id="x509AuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <property name="userDetailsService" ref="x509UserService" />
    </bean>

    <!-- A simple hard-coded user service that will pick up the CN from the cert and perform a simple match -->
    <sec:user-service id="x509UserService">
        <sec:user name="ORCID-T2-CLIENT-V1" authorities="ROLE_SYSTEM"/>
    </sec:user-service>

    <!-- The authentication manager that wraps the client details user service, that performs a db lookup -->
    <sec:authentication-manager id="clientAuthenticationManager">
        <sec:authentication-provider ref="orcidAuthenticationProvider"/>
    </sec:authentication-manager>

    <!-- Create for the filtering of Oauth2 resources -->
    <oauth2:resource-server id="resourceServerFilter" resource-id="orcid" token-services-ref="tokenServices" entry-point-ref="oauthAuthenticationEntryPoint"/>
    <oauth2:resource-server id="orcidResourceServerFilter" resource-id="orcid" token-services-ref="tokenServices" entry-point-ref="orcidOauthAuthenticationEntryPoint"/>

    <!-- User web expressions to aid the syntax of protection -->
    <oauth2:web-expression-handler id="oauthWebExpressionHandler" />
    
    <bean id="orcidAuthenticationProvider" class="org.orcid.core.oauth.OrcidMultiSecretAuthenticationProvider">
        <property name="userDetailsService" ref="clientDetailsUserService" />
    </bean>
    
	<bean id="corsFilter" class="org.orcid.core.web.filters.CorsFilter" />
	
	<bean id="acceptFilter" class="org.orcid.core.web.filters.AcceptFilter" />

    <bean id="jsonpCallbackFilter" class="org.orcid.core.web.filters.JsonpCallbackFilter" />
    
    <bean id="apiVersionFilter" class="org.orcid.core.web.filters.ApiVersionFilter" />         

    <!-- Add in order for it to be referenced in the filter order -->
    <bean id="customFilters" class="org.springframework.web.filter.CompositeFilter">
        <property name="filters">
            <list>
                <ref bean="clientCredentialsTokenEndpointFilter"/>
            </list>
        </property>
    </bean>
    <bean id="clientCredentialsTokenEndpointFilter" class="org.orcid.api.common.security.oauth.OrcidOauth2TokenEndPointFilter">
        <property name="authenticationEntryPoint" ref="oauthAuthenticationEntryPoint"/>
        <property name="authenticationManager" ref="clientAuthenticationManager"/>
    </bean>
    
    <bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="ORCID T2 API" />
        <property name="typeName" value="Bearer"/>
        <property name="exceptionRenderer" ref="oauthExceptionRenderer"/>
    </bean>
    
    <bean id="orcidOauthAuthenticationEntryPoint" class="org.orcid.api.common.exception.OrcidOAuth2AuthenticationEntryPoint">
        <property name="realmName" value="ORCID T2 API" />
        <property name="typeName" value="Bearer"/>
        <property name="exceptionRenderer" ref="oauthExceptionRenderer"/>
    </bean>
    
    <bean id="httpFirewall" class="org.springframework.security.web.firewall.DefaultHttpFirewall">
        <!--  Allow slash for webhooks --> 
        <property name="allowUrlEncodedSlash" value="true" />
    </bean>
       
    <bean id="memberDefaultApiVersionFilter" class="org.orcid.api.common.filter.DefaultApiVersionFilter">
        <property name="feature" value="MEMBER_API_DEFAULT_TO_V3" />
    </bean>        
    
    <bean id="clientIdAttributeFilter" class="org.orcid.api.common.filter.ClientIdAttributeFilter" />
    
    <bean id="disable20RCApiFilter" class="org.orcid.api.common.filter.Disable20RCApiFilter" />
        
</beans>