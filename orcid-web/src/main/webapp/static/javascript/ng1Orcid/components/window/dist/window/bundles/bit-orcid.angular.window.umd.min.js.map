{"version":3,"sources":["ng://@bit/orcid.angular.window/window.service.ts","ng://@bit/orcid.angular.window/window.module.ts"],"names":["WINDOW","InjectionToken","WindowRef","Object","defineProperty","prototype","Error","BrowserWindowRef","_super","call","this","__extends","window","windowFactory","browserWindowRef","platformId","isPlatformBrowser","nativeWindow","WINDOW_PROVIDERS","provide","useClass","useFactory","deps","PLATFORM_ID","WindowModule","NgModule","args","declarations","imports","providers"],"mappings":"4wBASaA,EAAS,IAAIC,EAAAA,eAAe,4BAGzC,SAAAC,KAIA,OAHEC,OAAAC,eAAIF,EAAAG,UAAA,eAAY,KAAhB,WACE,MAAM,IAAIC,MAAM,qDAEpBJ,mBAIE,SAAAK,WACEC,EAAAC,KAAAC,OAAOA,KAMX,OARsCC,EAAAJ,EAAAC,GAKpCL,OAAAC,eAAIG,EAAAF,UAAA,eAAY,KAAhB,WACE,OAAOO,wCAEXL,GARsCL,GAWtC,SAAgBW,EACdC,EACAC,GAEA,OAAIC,EAAAA,kBAAkBD,GACbD,EAAiBG,aAEnB,IAAId,WAiBAe,EAAmB,CAba,CAC3CC,QAASjB,EACTkB,SAAUb,GAI4B,CACtCY,QAASnB,EACTqB,WAAYR,EACZS,KAAM,CAACpB,EAAWqB,EAAAA,eClDpBC,EAAA,WAGA,SAAAA,KAK2B,2BAL1BC,EAAAA,SAAQC,KAAA,CAAC,CACRC,aAAc,GACdC,QAAS,GACTC,UAAW,CAACX,OAEaM,EAR3B","sourcesContent":["import { isPlatformBrowser } from '@angular/common'\r\nimport {\r\n  ClassProvider,\r\n  FactoryProvider,\r\n  InjectionToken,\r\n  PLATFORM_ID,\r\n} from '@angular/core'\r\n\r\n/* Create a new injection token for injecting the window into a component. */\r\nexport const WINDOW = new InjectionToken('WindowToken')\r\n\r\n/* Define abstract class for obtaining reference to the global window object. */\r\nexport abstract class WindowRef {\r\n  get nativeWindow(): Window | Object {\r\n    throw new Error('Not implemented.')\r\n  }\r\n}\r\n\r\n/* Define class that implements the abstract class and returns the native window object. */\r\nexport class BrowserWindowRef extends WindowRef {\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  get nativeWindow(): Window | Object {\r\n    return window\r\n  }\r\n}\r\n\r\n/* Create an factory function that returns the native window object. */\r\nexport function windowFactory(\r\n  browserWindowRef: BrowserWindowRef,\r\n  platformId: Object\r\n): Window | Object {\r\n  if (isPlatformBrowser(platformId)) {\r\n    return browserWindowRef.nativeWindow\r\n  }\r\n  return new Object()\r\n}\r\n\r\n/* Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class. */\r\nconst browserWindowProvider: ClassProvider = {\r\n  provide: WindowRef,\r\n  useClass: BrowserWindowRef,\r\n}\r\n\r\n/* Create an injectable provider that uses the windowFactory function for returning the native window object. */\r\nconst windowProvider: FactoryProvider = {\r\n  provide: WINDOW,\r\n  useFactory: windowFactory,\r\n  deps: [WindowRef, PLATFORM_ID],\r\n}\r\n\r\n/* Create an array of providers. */\r\nexport const WINDOW_PROVIDERS = [browserWindowProvider, windowProvider]\r\n","import { NgModule } from '@angular/core'\r\nimport { WINDOW_PROVIDERS } from './window.service'\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [],\r\n  providers: [WINDOW_PROVIDERS],\r\n})\r\nexport class WindowModule {}\r\n"]}