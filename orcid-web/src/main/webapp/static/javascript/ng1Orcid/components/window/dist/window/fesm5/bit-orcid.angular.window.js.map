{"version":3,"file":"bit-orcid.angular.window.js","sources":["ng://@bit/orcid.angular.window/window.service.ts","ng://@bit/orcid.angular.window/window.module.ts"],"sourcesContent":["import { isPlatformBrowser } from '@angular/common'\r\nimport {\r\n  ClassProvider,\r\n  FactoryProvider,\r\n  InjectionToken,\r\n  PLATFORM_ID,\r\n} from '@angular/core'\r\n\r\n/* Create a new injection token for injecting the window into a component. */\r\nexport const WINDOW = new InjectionToken('WindowToken')\r\n\r\n/* Define abstract class for obtaining reference to the global window object. */\r\nexport abstract class WindowRef {\r\n  get nativeWindow(): Window | Object {\r\n    throw new Error('Not implemented.')\r\n  }\r\n}\r\n\r\n/* Define class that implements the abstract class and returns the native window object. */\r\nexport class BrowserWindowRef extends WindowRef {\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  get nativeWindow(): Window | Object {\r\n    return window\r\n  }\r\n}\r\n\r\n/* Create an factory function that returns the native window object. */\r\nexport function windowFactory(\r\n  browserWindowRef: BrowserWindowRef,\r\n  platformId: Object\r\n): Window | Object {\r\n  if (isPlatformBrowser(platformId)) {\r\n    return browserWindowRef.nativeWindow\r\n  }\r\n  return new Object()\r\n}\r\n\r\n/* Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class. */\r\nconst browserWindowProvider: ClassProvider = {\r\n  provide: WindowRef,\r\n  useClass: BrowserWindowRef,\r\n}\r\n\r\n/* Create an injectable provider that uses the windowFactory function for returning the native window object. */\r\nconst windowProvider: FactoryProvider = {\r\n  provide: WINDOW,\r\n  useFactory: windowFactory,\r\n  deps: [WindowRef, PLATFORM_ID],\r\n}\r\n\r\n/* Create an array of providers. */\r\nexport const WINDOW_PROVIDERS = [browserWindowProvider, windowProvider]\r\n","import { NgModule } from '@angular/core'\r\nimport { WINDOW_PROVIDERS } from './window.service'\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [],\r\n  providers: [WINDOW_PROVIDERS],\r\n})\r\nexport class WindowModule {}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AASA,IAAa,MAAM,GAAG,IAAI,cAAc,CAAC,aAAa,CAAC;;;;;;;AAGvD;;;;;IAAA;KAIC;IAHC,sBAAI,mCAAY;;;;QAAhB;YACE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAA;SACpC;;;OAAA;IACH,gBAAC;CAAA,IAAA;;AAGD;;IAAsC,oCAAS;IAC7C;eACE,iBAAO;KACR;IAED,sBAAI,0CAAY;;;;QAAhB;YACE,OAAO,MAAM,CAAA;SACd;;;OAAA;IACH,uBAAC;CARD,CAAsC,SAAS,GAQ9C;;;;;;;AAGD,SAAgB,aAAa,CAC3B,gBAAkC,EAClC,UAAkB;IAElB,IAAI,iBAAiB,CAAC,UAAU,CAAC,EAAE;QACjC,OAAO,gBAAgB,CAAC,YAAY,CAAA;KACrC;IACD,OAAO,IAAI,MAAM,EAAE,CAAA;CACpB;;;IAGK,qBAAqB,GAAkB;IAC3C,OAAO,EAAE,SAAS;IAClB,QAAQ,EAAE,gBAAgB;CAC3B;;;;;IAGK,cAAc,GAAoB;IACtC,OAAO,EAAE,MAAM;IACf,UAAU,EAAE,aAAa;IACzB,IAAI,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC;CAC/B;;;;;AAGD,IAAa,gBAAgB,GAAG,CAAC,qBAAqB,EAAE,cAAc,CAAC;;;;;;ACtDvE;IAGA;KAK4B;;gBAL3B,QAAQ,SAAC;oBACR,YAAY,EAAE,EAAE;oBAChB,OAAO,EAAE,EAAE;oBACX,SAAS,EAAE,CAAC,gBAAgB,CAAC;iBAC9B;;IAC0B,mBAAC;CAL5B;;;;;;;;;;;;;;;;;;;"}