{"version":3,"file":"bit-orcid.angular.window.umd.js","sources":["ng://@bit/orcid.angular.window/window.service.ts","ng://@bit/orcid.angular.window/window.module.ts"],"sourcesContent":["import { isPlatformBrowser } from '@angular/common'\r\nimport {\r\n  ClassProvider,\r\n  FactoryProvider,\r\n  InjectionToken,\r\n  PLATFORM_ID,\r\n} from '@angular/core'\r\n\r\n/* Create a new injection token for injecting the window into a component. */\r\nexport const WINDOW = new InjectionToken('WindowToken')\r\n\r\n/* Define abstract class for obtaining reference to the global window object. */\r\nexport abstract class WindowRef {\r\n  get nativeWindow(): Window | Object {\r\n    throw new Error('Not implemented.')\r\n  }\r\n}\r\n\r\n/* Define class that implements the abstract class and returns the native window object. */\r\nexport class BrowserWindowRef extends WindowRef {\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  get nativeWindow(): Window | Object {\r\n    return window\r\n  }\r\n}\r\n\r\n/* Create an factory function that returns the native window object. */\r\nexport function windowFactory(\r\n  browserWindowRef: BrowserWindowRef,\r\n  platformId: Object\r\n): Window | Object {\r\n  if (isPlatformBrowser(platformId)) {\r\n    return browserWindowRef.nativeWindow\r\n  }\r\n  return new Object()\r\n}\r\n\r\n/* Create a injectable provider for the WindowRef token that uses the BrowserWindowRef class. */\r\nconst browserWindowProvider: ClassProvider = {\r\n  provide: WindowRef,\r\n  useClass: BrowserWindowRef,\r\n}\r\n\r\n/* Create an injectable provider that uses the windowFactory function for returning the native window object. */\r\nconst windowProvider: FactoryProvider = {\r\n  provide: WINDOW,\r\n  useFactory: windowFactory,\r\n  deps: [WindowRef, PLATFORM_ID],\r\n}\r\n\r\n/* Create an array of providers. */\r\nexport const WINDOW_PROVIDERS = [browserWindowProvider, windowProvider]\r\n","import { NgModule } from '@angular/core'\r\nimport { WINDOW_PROVIDERS } from './window.service'\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [],\r\n  providers: [WINDOW_PROVIDERS],\r\n})\r\nexport class WindowModule {}\r\n"],"names":["InjectionToken","isPlatformBrowser","PLATFORM_ID","NgModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;AASA,QAAa,MAAM,GAAG,IAAIA,mBAAc,CAAC,aAAa,CAAC;;;;;;;AAGvD;;;;;QAAA;SAIC;QAHC,sBAAI,mCAAY;;;;YAAhB;gBACE,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAA;aACpC;;;WAAA;QACH,gBAAC;KAAA,IAAA;;AAGD;;QAAsC,oCAAS;QAC7C;mBACE,iBAAO;SACR;QAED,sBAAI,0CAAY;;;;YAAhB;gBACE,OAAO,MAAM,CAAA;aACd;;;WAAA;QACH,uBAAC;KARD,CAAsC,SAAS,GAQ9C;;;;;;;IAGD,SAAgB,aAAa,CAC3B,gBAAkC,EAClC,UAAkB;QAElB,IAAIC,wBAAiB,CAAC,UAAU,CAAC,EAAE;YACjC,OAAO,gBAAgB,CAAC,YAAY,CAAA;SACrC;QACD,OAAO,IAAI,MAAM,EAAE,CAAA;KACpB;;;QAGK,qBAAqB,GAAkB;QAC3C,OAAO,EAAE,SAAS;QAClB,QAAQ,EAAE,gBAAgB;KAC3B;;;;;QAGK,cAAc,GAAoB;QACtC,OAAO,EAAE,MAAM;QACf,UAAU,EAAE,aAAa;QACzB,IAAI,EAAE,CAAC,SAAS,EAAEC,gBAAW,CAAC;KAC/B;;;;;AAGD,QAAa,gBAAgB,GAAG,CAAC,qBAAqB,EAAE,cAAc,CAAC;;;;;;ACtDvE;QAGA;SAK4B;;oBAL3BC,aAAQ,SAAC;wBACR,YAAY,EAAE,EAAE;wBAChB,OAAO,EAAE,EAAE;wBACX,SAAS,EAAE,CAAC,gBAAgB,CAAC;qBAC9B;;QAC0B,mBAAC;KAL5B;;;;;;;;;;;;;;;;;"}